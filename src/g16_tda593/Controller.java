// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package g16_tda593;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import project.AbstractRobotSimulator;
import project.AbstractSimulatorMonitor;
import project.LocationController;
import project.Point;
import g16_tda593.RobotAvatar;
import simbad.sim.EnvironmentDescription;
import g16_tda593.Environment;
import g16_tda593.Mission;
import g16_tda593.RewardSystem;
import g16_tda593.View;

/************************************************************/
/**
 * 
 */
public class Controller extends AbstractSimulatorMonitor<RobotAvatar> {
	/**
	 * 
	 */
	private List<View> views;
	/**
	 * 
	 */
	private List<Mission> missions;
	/**
	 * 
	 */
	private Set<RobotAvatar> robots;
	/**
	 * 
	 */
	private List<LocationController> locControllers;
	/**
	 * 
	 */
	private Environment environment;
	/**
	 * 
	 */
	private RewardSystem rs;
	
	public Controller( Set<RobotAvatar> robots, EnvironmentDescription e) {
		super(robots, e);
		views = new ArrayList<View>();
		missions = new LinkedList<Mission>();
		this.robots = robots;
		locControllers = new ArrayList<LocationController>();
		environment = new Environment(e);
		rs = new RewardSystem();
	}

	@Override
	public void update(RobotAvatar robot) {
		

	}
	
	public void addLocationController(LocationController lc) {
		this.locControllers.add(lc);
	}
	
	public Set<RobotAvatar> getRobots() {
		return this.robots;
	}
	
	public void addRobot(RobotAvatar r) {
		robots.add(r);
	}
	
	public Environment getEnvironment() {
		return this.environment;
	}
	
	public void addMission(Mission m) {
		this.missions.add(m);
	}
	
	public ArrayList<Mission> getMissions() {
		return (ArrayList<Mission>) this.missions;
	}

	/**
	 * 
	 * @param robot 
	 */
	public void executeMission(RobotAvatar robot) {
		if(robot.getMission() == null) {
			robot.setDestination(robot.getPosition());
			System.out.println("No mission specified");
			return;
		}
		
		LinkedList<Point> missionPoints = (LinkedList<Point>) robot.getMission().getPoints();
		while(!missionPoints.isEmpty()) {
			Point currentPoint = (Point) missionPoints.peek();
			robot.setDestination(currentPoint);
			if(robot.getPosition() == currentPoint) {
				missionPoints.pop();
			}
		}
	}

	/**
	 * 
	 * @param view 
	 */
	public void registerView(View view) {
	}

	/**
	 * for each v in views, v.updateRobots(robots)
	 */
	/*@Override
	public void notify() {
	}*/

	/**
	 * 
	 * @param m 
	 * @param r 
	 */
	public void addMissionToRobot(Mission m, RobotAvatar r) {
		r.setMission(m);
	}

	/**
	 * 
	 * @param r 
	 */
	public void removeMission(RobotAvatar r) {
		r.setMission(null);
	}

	/**
	 * 
	 */
	public void stopEverything() {
		for(AbstractRobotSimulator r : robots) {
			((RobotAvatar) r).setMission(null);
		}
	}
};
